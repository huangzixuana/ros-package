<?xml version="1.0"?>
<launch>
    <arg name="name" default="" />
    <arg name="type" default="modbus_tcp" /> <!-- modbus_tcp // sues // modbus_rtu -->
    <arg name="port" default="192.168.147.24" />
    <arg name="rate" default="0.5" />
    <arg name="debug" default="false" />

    <arg name="frame_id" default="base_plc24$(arg name)" />

    <arg name="byte_type" default="socket" if="$(eval type == 'modbus_tcp')" />
    <arg name="byte_head" default="0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00" if="$(eval type == 'modbus_tcp')" />
    <arg name="byte_tail" default="" if="$(eval type == 'modbus_tcp')" />
    <arg name="byte_write" default="0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00" if="$(eval type == 'modbus_tcp')" />
    <arg name="byte_read" default="0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00" if="$(eval type == 'modbus_tcp')" />
    <!-- 45= 42+3 -->
    <arg name="plc_ratio" default="100" if="$(eval type == 'modbus_tcp')" />

    <arg name="byte_type" default="serial" if="$(eval type == 'modbus_rtu')" />
    <arg name="byte_head" default="0x06" if="$(eval type == 'modbus_rtu')" />
    <arg name="byte_tail" default=", crc16, big" if="$(eval type == 'modbus_rtu')" />
    <arg name="byte_write" default="0x06" if="$(eval type == 'modbus_rtu')" />
    <arg name="byte_read" default="0x06" if="$(eval type == 'modbus_rtu')" />
    <arg name="plc_ratio" default="3200" if="$(eval type == 'modbus_rtu')" />

    <node if="$(eval type == 'modbus_tcp' or type == 'modbus_rtu')" name="rosbridge_plc24$(arg name)" pkg="rosbridge_driver" type="rosbridge_driver" output="screen">
        <param name="plc_port" value="$(arg port)" />
        <param name="debug_io" value="$(arg debug)" />
        <rosparam subst_value="true">
            port_chain:
              - name: plc_port
                type: $(arg byte_type)
                ip_port: 502
                timeout: 200.0
            topic_chain:
              - name: plc24_init
                type: std_msgs/String
                rate: 20.0
                op: publish
              - name: diagnostics
                type: diagnostic_updater/diagnostic_updater
                rate: $(arg rate)
                hardware_id: $(arg frame_id)
                frame_id: $(arg frame_id)
                level: 0 #[diagnostics_legacy/level]
                values: [serial_port, vendor_name,
                        battery_voltage, battery_current, hydraulic_voltage, chassis_voltage,
                        inverter_voltage, hydraulic_status, chassis_status, inverter_status,
                        comm_status, estop_status, system_status, robot_status,
                        charger_status, battery_voltage_alarm, overcurrent_alarm, error,
                        sensor_error, vacuum_pressure, temperature]
                serial_port: $(arg port)
                vendor_name: sues
                battery_voltage: ['=', [plc24_info/battery_voltage, '*', 0.1]]
                battery_current: ['=', [plc24_info/battery_current, '*', 0.1]]
                hydraulic_voltage: ['=', [plc24_info/hydraulic_voltage, '*', 0.1]]
                chassis_voltage: ['=', [plc24_info/chassis_voltage, '*', 0.1]]
                inverter_voltage: ['=', [plc24_info/inverter_voltage, '*', 0.1]]
                hydraulic_status: ['=', [plc24_info/hydraulic_status]]
                chassis_status: ['=', [plc24_info/chassis_status]]
                inverter_status: ['=', [plc24_info/inverter_status]]
                comm_status: ['=', [plc24_info/comm_status]]
                estop_status: ['=', [plc24_info/estop_status]]
                system_status: ['=', [plc24_info/system_status]]
                robot_status: ['=', [plc24_info/robot_status]]
                charger_status: ['=', [plc24_info/charger_status]]
                battery_voltage_alarm: ['=', [plc24_info/battery_voltage_alarm]]
                overcurrent_alarm: ['=', [plc24_info/overcurrent_alarm]]
                error: ['=', [plc24_info/error]]
                sensor_error: ['=', [plc24_info/sensor_error]]
                vacuum_pressure: ['=', [plc24_info/vacuum_pressure]]
                temperature: ['=', [plc24_info/temperature, '*', 0.1]]
              - name: plc24_request
                type: std_msgs/String
                op: subscribe
              - name: plc24_info
                type: std_msgs/String
                rate: 20.0
                op: subscribe
                diagnostic: plc24
                action_chain:
                  - name: plc_port
                    type: write
                    byte: [$(arg byte_head), 0x03, 0x00, 0x00, 0x00, 0x21 $(arg byte_tail)]
                  - name: plc_port
                    type: read
                    byte: [$(arg byte_read), 0x03, 0x42, 
                        battery_voltage,any,current,any,hydraulic_voltage,any,chassis_voltage,any,
                        inverter_voltage,any,hydraulic_status,any,chassis_status,any,inverter_status,any,
                        comm_status,any,estop_status,any,system_status,any,robot_status,big,
                        charger_status,any,battery_voltage_alarm,any,overcurrent_alarm,any,error,any,
                        sensor_error,any,any,any,any,any,any,any, 
                        any,any,any,any,any,any,any,any, 
                        any,any,any,any,any,any,any,any,
                        vacuum_pressure,big,temperature,big,any,any,any,any, 
                        any,any, $(arg byte_tail)]
              - name: plc24_message
                type: diagnostic_msgs/DiagnosticArray
                rate: 20.0
                op: publish
                hardware_id: $(arg frame_id)
                frame_id: $(arg frame_id)
                level: 0 #[diagnostics_legacy/level]
                values: [serial_port, vendor_name, 
                        robot_status, vacuum_pressure, estop_status]
                serial_port: $(arg port)
                vendor_name: sues
                robot_status: ['=', [plc24_info/robot_status]]
                vacuum_pressure: ['=', [plc24_info/vacuum_pressure]]
                estop_status: ['=', [plc24_info/estop_status]]
              - name: alarm_light_red
                type: std_msgs/String
                op: subscribe
                action_chain:
                  - name: plc_port
                    type: write
                    byte: [$(arg byte_write), 0x06, 0x00, 0x3A, 0x00, 0x03]
                  - name: plc_port
                    type: read
                    byte: [$(arg byte_head), 0x06, 0x00, 0x3A, any1, any2]
              - name: alarm_light_yellow
                type: std_msgs/String
                op: subscribe
                action_chain:
                  - name: plc_port
                    type: write
                    byte: [$(arg byte_write), 0x06, 0x00, 0x3A, 0x00, 0x02]
                  - name: plc_port
                    type: read
                    byte: [$(arg byte_head), 0x06, 0x00, 0x3A, any1, any2]
              - name: alarm_light_green
                type: std_msgs/String
                op: subscribe
                action_chain:
                  - name: plc_port
                    type: write
                    byte: [$(arg byte_write), 0x06, 0x00, 0x3A, 0x00, 0x01]
                  - name: plc_port
                    type: read
                    byte: [$(arg byte_head), 0x06, 0x00, 0x3A, any1, any2]
              - name: alarm_light_stop
                type: std_msgs/String
                op: subscribe
                action_chain:
                  - name: plc_port
                    type: write
                    byte: [$(arg byte_write), 0x06, 0x00, 0x3A, 0x00, 0x00]
                  - name: plc_port
                    type: read
                    byte: [$(arg byte_head), 0x06, 0x00, 0x3A, any1, any2]
              - name: buzzer_on
                type: std_msgs/String
                op: subscribe
                action_chain:
                  - name: plc_port
                    type: write
                    byte: [$(arg byte_write), 0x06, 0x00, 0x3B, 0x00, 0x01]
                  - name: plc_port
                    type: read
                    byte: [$(arg byte_head), 0x06, 0x00, 0x3B, any1, any2]
              - name: buzzer_off
                type: std_msgs/String
                op: subscribe
                action_chain:
                  - name: plc_port
                    type: write
                    byte: [$(arg byte_write), 0x06, 0x00, 0x3B, 0x00, 0x00]
                  - name: plc_port
                    type: read
                    byte: [$(arg byte_head), 0x06, 0x00, 0x3B, any1, any2]
              - name: light_on
                type: std_msgs/String
                op: subscribe
                action_chain:
                  - name: plc_port
                    type: write
                    byte: [$(arg byte_write), 0x06, 0x00, 0x3C, 0x00, 0x00]
                  - name: plc_port
                    type: read
                    byte: [$(arg byte_head), 0x06, 0x00, 0x3C, any1, any2]
              - name: light_off
                type: std_msgs/String
                op: subscribe
                action_chain:
                  - name: plc_port
                    type: write
                    byte: [$(arg byte_write), 0x06, 0x00, 0x3C, 0x00, 0x00]
                  - name: plc_port
                    type: read
                    byte: [$(arg byte_head), 0x06, 0x00, 0x3C, any1, any2]
              - name: cup_on
                type: std_msgs/String
                op: subscribe
                action_chain:
                  - name: plc_port
                    type: write
                    byte: [$(arg byte_write), 0x06, 0x00, 0x3D, 0x00, 0x00]
                  - name: plc_port
                    type: read
                    byte: [$(arg byte_head), 0x06, 0x00, 0x3D, any1, any2]
              - name: cup_off
                type: std_msgs/String
                op: subscribe
                action_chain:
                  - name: plc_port
                    type: write
                    byte: [$(arg byte_write), 0x06, 0x00, 0x3D, 0x00, 0x01]
                  - name: plc_port
                    type: read
                    byte: [$(arg byte_head), 0x06, 0x00, 0x3D, any1, any2]
              - name: heart_beat
                type: std_msgs/String
                rate: 0.5
                op: subscribe
                action_chain:
                  - name: plc_port
                    type: write
                    byte: [$(arg byte_write), 0x06, 0x00, 0x46, 0x00, 0x01]
                  - name: plc_port
                    type: read
                    byte: [$(arg byte_head), 0x06, 0x00, 0x46, any1, any2]
        </rosparam>
    </node>
</launch>
