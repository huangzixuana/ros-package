#!/usr/bin/env python3
# Author: lei.zeng@leapting.com
from __future__ import division
import rospy
import getpass
import yaml
import json
import git
from std_msgs.msg import String, Header
import dynamic_reconfigure.client
import copy
import roslaunch
import datetime


def relative_to_absolute_path(relative_path):
    if relative_path[0] == '~':
        return '/home/' + getpass.getuser() + relative_path[1:]
    else:
        return relative_path


def launch_gen(path):
    uuid = roslaunch.rlutil.get_or_generate_uuid(None, False)
    roslaunch.configure_logging(uuid)
    return roslaunch.parent.ROSLaunchParent(uuid, [path])


class robotStateNode(object):
    def __init__(self):
        self.state_pub = rospy.Publisher(
            'robot_state', String, queue_size=1, latch=True)
        self.trig_pub = rospy.Publisher('trig',
                                        Header,
                                        queue_size=10)
        self.param_path = relative_to_absolute_path(rospy.get_param(
            '~param_path', '~/zl_ws/src/robot_state/cfg/robot_state_params.yaml'))

        self.repo_path = rospy.get_param('~repo_path', '')

        yaml_d = self.read_yaml()
        self.state_dict = self.read_yaml()

        dynparam_dict = {}
        if 'dynparam' in self.state_dict:
            for c in self.state_dict['dynparam']:
                dynparam_dict[c] = {}
                for p in self.state_dict['dynparam'][c]:
                    dynparam_dict[c][p] = None

        self.state_dict['dynparam'] = dynparam_dict

        self.get_dynparam()

        if 'parameter' in self.state_dict:
            rospy.set_param("robot_state", self.state_dict['parameter'])

        if self.repo_path != '':
            self.repo_git = git.Repo(relative_to_absolute_path(self.repo_path))
            self.state_dict['git'] = {}
            self.get_git_info()

        self._trig_dict = {
            'launch':
            {
                'pdu':
                {
                    'path':  rospy.get_param("~pdu_launch_path", ''),
                    'cmd': -1
                },
                'arm':
                {
                    'path':  rospy.get_param("~arm_launch_path", ''),
                    'cmd': -1
                }
            }
        }

        rospy.Subscriber('trig',
                         Header,
                         self.trig_cb,
                         queue_size=10)

        rospy.Subscriber('robot_command',
                         String,
                         self.cmd_cb,
                         queue_size=10)
        self.pub_state()

    def trig_cb(self, msg):
        if msg.frame_id[:6] == 'launch':
            try:
                self._trig_dict['launch'][msg.frame_id[7:]]['cmd'] = msg.seq
            except Exception as e:
                rospy.logwarn(
                    'trig cb exception: ' % str(e))

    def get_dynparam(self):
        for c in self.state_dict['dynparam']:
            for p in self.state_dict['dynparam'][c]:
                self.state_dict['dynparam'][c][p] = rospy.get_param(
                    '%s/%s' % (c, p), None)

    def set_dynparam(self, c, p, v):
        params = {p: v}
        try:
            client_recfg = dynamic_reconfigure.client.Client(c, timeout=1)
            c.update_configuration(params)
            rospy.loginfo('set %s/%s to be %s ' % (c, p, str(v)))
        except:
            pass

    def cmd_cb(self, msg):
        pub_once = False
        try:
            cmd_dict = json.loads(msg.data)
        except Exception as e:
            rospy.logwarn(
                "exception while json loading: %s" % str(e))
            return

        if 'parameter' in cmd_dict:
            pub_once = True
            rospy.set_param("robot_state", self.state_dict['parameter'])
            for p in cmd_dict['parameter']:
                for f in self.state_dict['flexbe']:
                    if p in self.state_dict['flexbe'][f]:
                        self.state_dict['flexbe'][f][p] = str(
                            cmd_dict['parameter'][p])
            try:
                self.state_dict['parameter'].update(cmd_dict['parameter'])
                self.write_yaml()
            except Exception as e:
                rospy.logwarn(
                    "exception while json loading: %s" % str(e))

        if 'dynparam' in cmd_dict:
            pub_once = True
            for c in cmd_dict['dynparam']:
                for p in cmd_dict['dynparam'][c]:
                    self.set_dynparam(c, p,  cmd_dict['dynparam'][c][p])
            self.get_dynparam()

        if 'git' in cmd_dict:
            pub_once = True
            # if cmd_dict['git']['op'] == 'pull':
            #     self.state_dict['git'] = {'op': 'pull', 'res': self.git_pull()}

            if cmd_dict['git']['op'] == 'pull':
                res_msg = Header()
                res_msg.frame_id = "git_pull_res"
                if self.git_pull():
                    res_msg.seq = 1
                else:
                    res_msg.seq = 0
                self.trig_pub.publish(res_msg)
                self.get_git_info()

        if pub_once:
            self.pub_state()

    def git_pull(self):
        try:
            self.repo_git.git.reset('--hard')
            rospy.loginfo('reset --hard')
            repo = self.repo_git.remote(name='origin')
            repo.pull()
            rospy.loginfo('git pull: successful')
            return True
        except Exception as e:
            rospy.logwarn('git pull exception: %s' % str(e))
            return False

    def get_git_info(self):
        try:
            head_commit = self.repo_git.head.commit
            message = self.repo_git.commit().message
            date = self.repo_git.commit().committed_datetime
            date_str = datetime.datetime.strftime(date, '%Y%m%d')

            self.state_dict['git']['info'] = {'head': str(head_commit), 'msg':  str(
                message), 'date': str(date_str), 'branch': str(self.repo_git.active_branch.name)}

            # tag = self.repo_git.tags
            # print(list(tag))
            print(self.state_dict)

        except Exception as e:
            rospy.logwarn('git pull exception: %s' % str(e))
            return False

    def read_yaml(self):
        with open(self.param_path, 'r') as f:
            return yaml.safe_load(f)

    def write_yaml(self):
        dict_copy = copy.deepcopy(self.state_dict)
        if 'git' in dict_copy:
            del dict_copy['git']
        with open(self.param_path, 'w') as f:
            yaml_doc = yaml.safe_dump(
                dict_copy, default_flow_style=False)
            f.write(yaml_doc)
            rospy.loginfo("robot state parameter yaml is updated")

    def pub_state(self):
        string_msg = String()
        string_msg.data = json.dumps(self.state_dict, sort_keys=True)
        self.state_pub.publish(string_msg)


def main():
    rospy.init_node('robot_state_node')
    state_obj = robotStateNode()
    launch_dict = {}
    for k in state_obj._trig_dict['launch']:
        if state_obj._trig_dict['launch'][k]['path'] != '':
            launch_dict[k] = launch_gen(relative_to_absolute_path(
                state_obj._trig_dict['launch'][k]['path']))
    try:
        while not rospy.is_shutdown():
            for k in state_obj._trig_dict['launch']:
                if state_obj._trig_dict['launch'][k]['cmd'] == 1:
                    launch_dict[k] = launch_gen(relative_to_absolute_path(
                        state_obj._trig_dict['launch'][k]['path']))
                    try:
                        launch_dict[k].start()
                        rospy.loginfo('%s launched' % k)
                        state_obj._trig_dict['launch'][k]['cmd'] = -1
                        rospy.sleep(3)
                    except Exception as e:
                        rospy.logwarn(str(e))
                elif state_obj._trig_dict['launch'][k]['cmd'] == 0:
                    try:
                        launch_dict[k].shutdown()
                        rospy.loginfo('%s shutdown' % k)
                        state_obj._trig_dict['launch'][k]['cmd'] = -1
                        rospy.sleep(3)
                    except Exception as e:
                        rospy.logwarn(str(e))
            rospy.sleep(1.0)

    except:
        print("Shutting down...")


if __name__ == '__main__':
    main()
